<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>
    <property name="fileExtensions" value="java, properties, xml"/>

<!--    <module name="SuppressionFilter">
        <property name="file" value="${suppressDir}/checkstyleSuppressions.xml"/>
    </module>-->

    <module name="SuppressWarningsFilter"/>

    <module name="FileLength">
        <property name="max" value="3000"/>
    </module>

    <module name="NewlineAtEndOfFile"/>

    <module name="RegexpMultiline">
        <property name="format" value="^([^\n ]+ )*(class|interface|enum) [^{]*\{\n[^\n}]"/>
        <property name="message" value="Leave empty line after class/interface/enum definition"/>
        <property name="severity" value="error"/>
        <property name="fileExtensions" value="java"/>
    </module>

    <module name="MethodOrderCheck"/>
    <module name="TreeWalker">
        <module name="SuppressWarningsHolder"/>
        <module name="ArrayTypeStyle"/>
        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport"/>
        <module name="ConstantName"/>
        <module name="DeclarationOrder"/>
        <module name="DefaultComesLast"/>
        <module name="EqualsHashCode"/>
        <module name="FallThrough"/>
        <module name="FinalLocalVariable"/>
        <module name="FinalParameters">
            <property name="tokens" value="CTOR_DEF, LITERAL_CATCH, FOR_EACH_CLAUSE"/>
        </module>
        <module name="InnerTypeLast"/>
        <module name="GenericWhitespace"/>
        <module name="InterfaceIsType"/>
        <module name="LocalFinalVariableName"/>
        <module name="ModifierOrder"/>
        <module name="MissingOverride"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="MutableException"/>
        <module name="NeedBraces"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="NoLineWrap"/>
        <module name="OneStatementPerLine"/>
        <module name="OneTopLevelClass"/>
        <module name="OuterTypeFilename"/>
        <module name="OuterTypeNumber"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageAnnotation"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterNumber">
            <!--TODO: make less PasswordEmptyHardcodedDetector2-->
            <property name="max" value="11"/>
        </module>
        <module name="RedundantImport"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperFinalize"/>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="org.jetbrains.annotations, edu.umd.cs.findbugs.annotations"/>
        </module>
        <module name="IllegalImport">
            <property name="regexp" value="true"/>
            <property name="illegalClasses" value=".*Nonnull$, .*NotNull$"/>
        </module>
        <module name="UnusedImports"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="UpperEll"/>

        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>

        <module name="SingleSpaceSeparator"/>
        <module name="VisibilityModifier">
            <!-- TODO: remove protectedAllowed -->
            <property name="protectedAllowed" value="true"/>
            <property name="allowPublicFinalFields" value="true"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyMethods" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="8"/>
        </module>

        <module name="CustomImportOrder">
            <property name="customImportOrderRules"
                      value="SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###STATIC"/>
            <property name="specialImportsRegExp" value="ru.sbrf.efx"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens"
                      value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="LeftCurly">
            <property name="option" value="nl"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
    </module>

    <module name="LineLength">
        <property name="ignorePattern" value="[ ]+\*.*"/>
        <property name="max" value="120"/>
    </module>
</module>
